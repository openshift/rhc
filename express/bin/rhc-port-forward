#!/usr/bin/env ruby
require 'rhc-common'

#
# print help
#
def p_usage(exit_code = 255)
    rhlogin = get_var('default_rhlogin') ? "Default: #{get_var('default_rhlogin')}" : "required"
    puts <<USAGE

Usage: rhc port-forward
Forward remote ports to the workstation

  -l|--rhlogin   rhlogin    Red Hat login (RHN or OpenShift login) (#{rhlogin})
  -a|--app                  Target application (required)
  -p|--password  password   RHLogin password (optional, will prompt)
  -d|--debug                Print Debug info
  -h|--help                 Show Usage info
  --config  path            Path of alternate config file
  --timeout #               Timeout, in seconds, for the session

USAGE
exit exit_code
end

begin
    opts = GetoptLong.new(
        ["--debug", "-d", GetoptLong::NO_ARGUMENT],
        ["--help",  "-h", GetoptLong::NO_ARGUMENT],
        ["--app",  "-a", GetoptLong::REQUIRED_ARGUMENT],
        ["--rhlogin",  "-l", GetoptLong::REQUIRED_ARGUMENT],
        ["--config", GetoptLong::REQUIRED_ARGUMENT],
        ["--password",  "-p", GetoptLong::REQUIRED_ARGUMENT],
        ["--timeout", GetoptLong::REQUIRED_ARGUMENT]
    )
    opt = {}
    opts.each do |o, a|
        opt[o[2..-1]] = a.to_s
    end
rescue Exception => e
  #puts e.message
    p_usage
end

# If provided a config path, check it
check_cpath(opt)

# Pull in configs from files
libra_server = get_var('libra_server')
debug = get_var('debug') == 'false' ? nil : get_var('debug')

p_usage 0 if opt['help']

p_usage if !opt['app'] || 0 != ARGV.length

debug = true if opt['debug']

RHC::debug(debug)

RHC::timeout(opt["timeout"], get_var('timeout'))
RHC::connect_timeout(opt["timeout"], get_var('timeout'))

opt['rhlogin'] = get_var('default_rhlogin') unless opt['rhlogin']

if !RHC::check_rhlogin(opt['rhlogin'])
    p_usage
end

password = opt['password']
if !password
  password = RHC::get_password
end

user_info = RHC::get_user_info(libra_server, opt['rhlogin'], password, @http, false)

app_name = opt['app']

unless user_info['app_info'][app_name]
    puts
    puts "Could not find app '#{app_name}'.  Please run rhc-domain-info to get a list"
    puts "of your current running applications"
    puts
    exit 101
end

app_uuid = user_info['app_info'][app_name]['uuid']
namespace = user_info['user_info']['domains'][0]['namespace']
rhc_domain = user_info['user_info']['rhc_domain']

puts "Checking available ports..."

hosts_and_ports, hosts_and_ports_descriptions = RHC::list_ports(rhc_domain, namespace, app_name, app_uuid, debug)

if hosts_and_ports.length == 0
  puts
  puts "No available ports to forward"
  exit 102
end

puts

hosts_and_ports_descriptions.each { |description| puts "Binding #{description}..." }

ssh_cmd = "ssh -N "
hosts_and_ports.each { |port| ssh_cmd << "-L #{port}:#{port} " }
ssh_cmd << "#{app_uuid}@#{app_name}-#{namespace}.#{rhc_domain}"

puts ssh_cmd if debug
puts
puts "Use ctl + c to stop"

begin
  exec ssh_cmd
rescue SystemCallError
  puts
  puts "Error trying to forward ports.  You can try to forward manually by running:"
  puts
  puts ssh_cmd
  puts
  exit 1
end

# never
exit 1
