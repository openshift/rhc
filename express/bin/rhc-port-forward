#!/usr/bin/env ruby
# Copyright 2011 Red Hat, Inc.
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

require 'rhc-common'

#
# print help
#
def p_usage
    rhlogin = get_var('default_rhlogin') ? "Default: #{get_var('default_rhlogin')}" : "required"
    puts <<USAGE

Usage: #{$0}
Forward remote ports to the workstation

  -l|--rhlogin   rhlogin    Red Hat login (RHN or OpenShift login with OpenShift Express access) (#{rhlogin})
  -a|--app                  Target application (required)
  -p|--password  password   RHLogin password (optional, will prompt)
  -d|--debug                Print Debug info
  -h|--help                 Show Usage info
  --config  path            Path of alternate config file
  --timeout #               Timeout, in seconds, for connection

USAGE
exit 255
end

begin
    opts = GetoptLong.new(
        ["--debug", "-d", GetoptLong::NO_ARGUMENT],
        ["--help",  "-h", GetoptLong::NO_ARGUMENT],
        ["--app",  "-a", GetoptLong::REQUIRED_ARGUMENT],
        ["--rhlogin",  "-l", GetoptLong::REQUIRED_ARGUMENT],
        ["--config", GetoptLong::REQUIRED_ARGUMENT],
        ["--password",  "-p", GetoptLong::REQUIRED_ARGUMENT],
        ["--timeout", GetoptLong::REQUIRED_ARGUMENT]
    )
    opt = {}
    opts.each do |o, a|
        opt[o[2..-1]] = a.to_s
    end
rescue Exception => e
  #puts e.message
    p_usage
end

# If provided a config path, check it
check_cpath(opt)

# Pull in configs from files
libra_server = get_var('libra_server')
debug = get_var('debug') == 'false' ? nil : get_var('debug')

if opt['help'] || !opt['app'] || 0 != ARGV.length 
    p_usage
end

if opt['debug']
    debug = true
end
RHC::debug(debug)

RHC::timeout(opt["timeout"] ? opt["timeout"] : get_var('timeout'))

opt['rhlogin'] = get_var('default_rhlogin') unless opt['rhlogin']

if !RHC::check_rhlogin(opt['rhlogin'])
    p_usage
end

password = opt['password']
if !password
  password = RHC::get_password
end

user_info = RHC::get_user_info(libra_server, opt['rhlogin'], password, @http, false)

app_name = opt['app']

unless user_info['app_info'][app_name]
    puts
    puts "Could not find app '#{app_name}'.  Please run rhc-user-info to get a list"
    puts "of your current running applications"
    puts
    exit 101
end

app_uuid = user_info['app_info'][app_name]['uuid']
namespace = user_info['user_info']['namespace']
rhc_domain = user_info['user_info']['rhc_domain']

puts "Checking available ports..."

hosts_and_ports, hosts_and_ports_descriptions = RHC::list_ports(rhc_domain, namespace, app_name, app_uuid, debug)

if hosts_and_ports.length == 0
  puts
  puts "No available ports to forward"
  exit 102
end

puts

hosts_and_ports_descriptions.each { |description| puts "Binding #{description}..." }

ssh_cmd = "ssh -N "
hosts_and_ports.each { |port| ssh_cmd << "-L #{port}:#{port} " }
ssh_cmd << "#{app_uuid}@#{app_name}-#{namespace}.#{rhc_domain}"

puts ssh_cmd if debug
puts
puts "Use ctl + c to stop"

begin
  exec ssh_cmd
rescue SystemCallError
  puts
  puts "Error trying to forward ports.  You can try to forward manually by running:"
  puts
  puts ssh_cmd
  puts
  exit 1
end

# never
exit 1
