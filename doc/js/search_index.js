var search_data = {"index":{"searchIndex":["rhc","rest","application","baseexception","cartridge","client","clienterrorexception","domain","key","requestdeniedexception","resourceaccessexception","resourcenotfoundexception","servererrorexception","serviceunavailableexception","unauthorizedexception","user","validationexception","add_application()","add_cartridge()","add_domain()","add_key()","applications()","cartridges()","cartridges()","close()","delete()","delete()","delete()","delete()","destroy()","destroy()","destroy()","destroy()","domains()","find_application()","find_cartridge()","find_domain()","find_key()","find_key()","keys()","logger()","logout()","new()","new()","new()","new()","new()","new()","new()","new()","parse_response()","process_error_response()","reload()","restart()","restart()","save()","send()","start()","start()","stop()","stop()","update()","update()","user()","gemfile","rakefile"],"longSearchIndex":["rhc","rhc::rest","rhc::rest::application","rhc::rest::baseexception","rhc::rest::cartridge","rhc::rest::client","rhc::rest::clienterrorexception","rhc::rest::domain","rhc::rest::key","rhc::rest::requestdeniedexception","rhc::rest::resourceaccessexception","rhc::rest::resourcenotfoundexception","rhc::rest::servererrorexception","rhc::rest::serviceunavailableexception","rhc::rest::unauthorizedexception","rhc::rest::user","rhc::rest::validationexception","rhc::rest::domain#add_application()","rhc::rest::application#add_cartridge()","rhc::rest::client#add_domain()","rhc::rest::user#add_key()","rhc::rest::domain#applications()","rhc::rest::application#cartridges()","rhc::rest::client#cartridges()","rhc::rest::client#close()","rhc::rest::application#delete()","rhc::rest::cartridge#delete()","rhc::rest::domain#delete()","rhc::rest::key#delete()","rhc::rest::application#destroy()","rhc::rest::cartridge#destroy()","rhc::rest::domain#destroy()","rhc::rest::key#destroy()","rhc::rest::client#domains()","rhc::rest::client#find_application()","rhc::rest::client#find_cartridge()","rhc::rest::client#find_domain()","rhc::rest::client#find_key()","rhc::rest::user#find_key()","rhc::rest::user#keys()","rhc::rest#logger()","rhc::rest::client#logout()","rhc::rest::application::new()","rhc::rest::baseexception::new()","rhc::rest::cartridge::new()","rhc::rest::client::new()","rhc::rest::domain::new()","rhc::rest::key::new()","rhc::rest::user::new()","rhc::rest::validationexception::new()","rhc::rest#parse_response()","rhc::rest#process_error_response()","rhc::rest::cartridge#reload()","rhc::rest::application#restart()","rhc::rest::cartridge#restart()","rhc::rest::domain#save()","rhc::rest#send()","rhc::rest::application#start()","rhc::rest::cartridge#start()","rhc::rest::application#stop()","rhc::rest::cartridge#stop()","rhc::rest::domain#update()","rhc::rest::key#update()","rhc::rest::client#user()","",""],"info":[["Rhc","","Rhc.html","","<p>Copyright 2011 Red Hat, Inc.\n<p>Permission is hereby granted, free of charge, to any person obtaining a\ncopy …\n"],["Rhc::Rest","","Rhc/Rest.html","",""],["Rhc::Rest::Application","","Rhc/Rest/Application.html","",""],["Rhc::Rest::BaseException","","Rhc/Rest/BaseException.html","",""],["Rhc::Rest::Cartridge","","Rhc/Rest/Cartridge.html","",""],["Rhc::Rest::Client","","Rhc/Rest/Client.html","",""],["Rhc::Rest::ClientErrorException","","Rhc/Rest/ClientErrorException.html","","<p>Exceptions thrown in case of an HTTP 4xx is received with the exception  of\n401, 403, 403 and 422 where …\n"],["Rhc::Rest::Domain","","Rhc/Rest/Domain.html","",""],["Rhc::Rest::Key","","Rhc/Rest/Key.html","",""],["Rhc::Rest::RequestDeniedException","","Rhc/Rest/RequestDeniedException.html","","<p>Exceptions thrown in case of an HTTP 403 is received.\n<p>403 Forbidden\n<p>The server understood the request, …\n"],["Rhc::Rest::ResourceAccessException","","Rhc/Rest/ResourceAccessException.html","","<p>I/O Exceptions\n"],["Rhc::Rest::ResourceNotFoundException","","Rhc/Rest/ResourceNotFoundException.html","","<p>Exceptions thrown in case of an HTTP 404 is received.\n<p>404 Not Found\n<p>The server has not found anything matching …\n"],["Rhc::Rest::ServerErrorException","","Rhc/Rest/ServerErrorException.html","","<p>Exceptions thrown in case of an HTTP 5xx is received.\n"],["Rhc::Rest::ServiceUnavailableException","","Rhc/Rest/ServiceUnavailableException.html","","<p>Exceptions thrown in case of an HTTP 503 is received.\n<p>503 Service Unavailable\n<p>The server is currently unable …\n"],["Rhc::Rest::UnAuthorizedException","","Rhc/Rest/UnAuthorizedException.html","","<p>Exceptions thrown in case of an HTTP 401 is received.\n<p>401 Unauthorized\n<p>The request requires user authentication. …\n"],["Rhc::Rest::User","","Rhc/Rest/User.html","",""],["Rhc::Rest::ValidationException","","Rhc/Rest/ValidationException.html","","<p>Exceptions thrown in case of an HTTP 422 is received.\n"],["add_application","Rhc::Rest::Domain","Rhc/Rest/Domain.html#method-i-add_application","(name, cartridge)","<p>Add Application to this domain\n"],["add_cartridge","Rhc::Rest::Application","Rhc/Rest/Application.html#method-i-add_cartridge","(name)","<p>Add Cartridge\n"],["add_domain","Rhc::Rest::Client","Rhc/Rest/Client.html#method-i-add_domain","(namespace)","<p>Add Domain\n"],["add_key","Rhc::Rest::User","Rhc/Rest/User.html#method-i-add_key","(name, content, type)","<p>Add Key for this user\n"],["applications","Rhc::Rest::Domain","Rhc/Rest/Domain.html#method-i-applications","()","<p>Get all Application for this domain\n"],["cartridges","Rhc::Rest::Application","Rhc/Rest/Application.html#method-i-cartridges","()","<p>Get all Cartridge for this applications\n"],["cartridges","Rhc::Rest::Client","Rhc/Rest/Client.html#method-i-cartridges","()","<p>Get all Cartridge\n"],["close","Rhc::Rest::Client","Rhc/Rest/Client.html#method-i-close","()",""],["delete","Rhc::Rest::Application","Rhc/Rest/Application.html#method-i-delete","()",""],["delete","Rhc::Rest::Cartridge","Rhc/Rest/Cartridge.html#method-i-delete","()",""],["delete","Rhc::Rest::Domain","Rhc/Rest/Domain.html#method-i-delete","(force=false)",""],["delete","Rhc::Rest::Key","Rhc/Rest/Key.html#method-i-delete","()",""],["destroy","Rhc::Rest::Application","Rhc/Rest/Application.html#method-i-destroy","()","<p>Delete Application\n"],["destroy","Rhc::Rest::Cartridge","Rhc/Rest/Cartridge.html#method-i-destroy","()","<p>Delete Cartridge\n"],["destroy","Rhc::Rest::Domain","Rhc/Rest/Domain.html#method-i-destroy","(force=false)","<p>Delete Domain\n"],["destroy","Rhc::Rest::Key","Rhc/Rest/Key.html#method-i-destroy","()","<p>Delete Key\n"],["domains","Rhc::Rest::Client","Rhc/Rest/Client.html#method-i-domains","()","<p>Get all Domain\n"],["find_application","Rhc::Rest::Client","Rhc/Rest/Client.html#method-i-find_application","(name)","<p>Find Application by name\n"],["find_cartridge","Rhc::Rest::Client","Rhc/Rest/Client.html#method-i-find_cartridge","(name)","<p>Find Cartridge by name\n"],["find_domain","Rhc::Rest::Client","Rhc/Rest/Client.html#method-i-find_domain","(namespace)","<p>Find Domain by namesapce\n"],["find_key","Rhc::Rest::Client","Rhc/Rest/Client.html#method-i-find_key","(name)","<p>find Key by name\n"],["find_key","Rhc::Rest::User","Rhc/Rest/User.html#method-i-find_key","(name)","<p>Find Key by name\n"],["keys","Rhc::Rest::User","Rhc/Rest/User.html#method-i-keys","()","<p>Get all Key for this user\n"],["logger","Rhc::Rest","Rhc/Rest.html#method-i-logger","()",""],["logout","Rhc::Rest::Client","Rhc/Rest/Client.html#method-i-logout","()",""],["new","Rhc::Rest::Application","Rhc/Rest/Application.html#method-c-new","(args)",""],["new","Rhc::Rest::BaseException","Rhc/Rest/BaseException.html#method-c-new","(msg=nil, code=nil)",""],["new","Rhc::Rest::Cartridge","Rhc/Rest/Cartridge.html#method-c-new","(args)",""],["new","Rhc::Rest::Client","Rhc/Rest/Client.html#method-c-new","(end_point, username, password)",""],["new","Rhc::Rest::Domain","Rhc/Rest/Domain.html#method-c-new","(args)",""],["new","Rhc::Rest::Key","Rhc/Rest/Key.html#method-c-new","(args)",""],["new","Rhc::Rest::User","Rhc/Rest/User.html#method-c-new","(args)",""],["new","Rhc::Rest::ValidationException","Rhc/Rest/ValidationException.html#method-c-new","(messages)",""],["parse_response","Rhc::Rest","Rhc/Rest.html#method-i-parse_response","(response)",""],["process_error_response","Rhc::Rest","Rhc/Rest.html#method-i-process_error_response","(response)",""],["reload","Rhc::Rest::Cartridge","Rhc/Rest/Cartridge.html#method-i-reload","()","<p>Reload Cartridge\n"],["restart","Rhc::Rest::Application","Rhc/Rest/Application.html#method-i-restart","()","<p>Restart Application\n"],["restart","Rhc::Rest::Cartridge","Rhc/Rest/Cartridge.html#method-i-restart","()","<p>Restart Cartridge\n"],["save","Rhc::Rest::Domain","Rhc/Rest/Domain.html#method-i-save","(new_namespace)",""],["send","Rhc::Rest","Rhc/Rest.html#method-i-send","(request)",""],["start","Rhc::Rest::Application","Rhc/Rest/Application.html#method-i-start","()","<p>Start Application\n"],["start","Rhc::Rest::Cartridge","Rhc/Rest/Cartridge.html#method-i-start","()","<p>Start Cartridge\n"],["stop","Rhc::Rest::Application","Rhc/Rest/Application.html#method-i-stop","(force=false)","<p>Stop  Application\n"],["stop","Rhc::Rest::Cartridge","Rhc/Rest/Cartridge.html#method-i-stop","()","<p>Stop Cartridge\n"],["update","Rhc::Rest::Domain","Rhc/Rest/Domain.html#method-i-update","(new_namespace)","<p>Update Domain\n"],["update","Rhc::Rest::Key","Rhc/Rest/Key.html#method-i-update","(type, content)","<p>Update Key\n"],["user","Rhc::Rest::Client","Rhc/Rest/Client.html#method-i-user","()","<p>Get User info\n"],["Gemfile","","Gemfile.html","","<p>source “rubygems.org”\n<p># Specify your gem’s dependencies in rhc-rest.gemspec gemspec\n"],["Rakefile","","Rakefile.html","","<p>require “bundler/gem_tasks”\n"]]}}