#!/usr/bin/env ruby

require 'rhc/coverage_helper'

require 'rhc-common'

puts "Warning: This command is deprecated and will be removed in the future. Please use 'rhc snapshot' instead."
puts""

#
# print help
#
def p_usage(exit_code = 255)
    rhlogin = get_var('default_rhlogin') ? "Default: #{get_var('default_rhlogin')}" : "required"
    puts <<USAGE

Usage: #{$0}
Pull down application snapshot for a user

  -l|--rhlogin   rhlogin    OpenShift login (#{rhlogin})
  -a|--app                  Target application to snapshot (required)
  -r|--restore              Local path of the tarball to restore (restores git and application data folders found in archive)
  -s|--save                 Local path to save tarball (default: ./$APPNAME.tar.gz)
  -p|--password  password   Password (optional, will prompt)
  -d|--debug                Print Debug info
  -h|--help                 Show Usage info
  --config  path            Path of alternate config file
  --timeout #               Timeout, in seconds, for the session

USAGE
exit exit_code
end

begin
    opts = GetoptLong.new(
        ["--debug", "-d", GetoptLong::NO_ARGUMENT],
        ["--help",  "-h", GetoptLong::NO_ARGUMENT],
        ["--app",  "-a", GetoptLong::REQUIRED_ARGUMENT],
        ["--save",  "-s", GetoptLong::REQUIRED_ARGUMENT],
        ["--restore",  "-r", GetoptLong::REQUIRED_ARGUMENT],
        ["--rhlogin",  "-l", GetoptLong::REQUIRED_ARGUMENT],
        ["--config", GetoptLong::REQUIRED_ARGUMENT],
        ["--password",  "-p", GetoptLong::REQUIRED_ARGUMENT],
        ["--timeout", GetoptLong::REQUIRED_ARGUMENT]
    )
    opt = {}
    opts.each do |o, a|
        opt[o[2..-1]] = a.to_s
    end
rescue Exception => e
  #puts e.message
    p_usage
end

# If provided a config path, check it
RHC::Config.check_cpath(opt)

# Pull in configs from files
libra_server = get_var('libra_server')
debug = get_var('debug') == 'false' ? nil : get_var('debug')

p_usage 0 if opt["help"]

p_usage if !opt['app'] || 0 != ARGV.length

debug = true if opt["debug"]

RHC::debug(debug)

RHC::timeout(opt["timeout"], get_var('timeout'))
RHC::connect_timeout(opt["timeout"], get_var('timeout'))

opt["rhlogin"] = get_var('default_rhlogin') unless opt["rhlogin"]

if !RHC::check_rhlogin(opt['rhlogin'])
    p_usage
end

password = opt['password']
if !password
  password = RHC::get_password
end

user_info = RHC::get_user_info(libra_server, opt['rhlogin'], password, RHC::Config.default_proxy, debug, false)

app = opt['app']
opt['save'] = "#{opt['app']}.tar.gz" unless opt['save'] || opt['restore']

unless user_info['app_info'][app]
    puts
    puts "Could not find app '#{app}'.  Please run rhc-domain-info to get a list"
    puts "of your current running applications"
    puts
    exit 101
end

app_uuid = user_info['app_info'][app]['uuid']
namespace = user_info['user_info']['domains'][0]['namespace']
rhc_domain = user_info['user_info']['rhc_domain']

if opt['save']
  status = RHC.snapshot_create rhc_domain, namespace, app, app_uuid, opt['save'], debug
  exit status if ! status
else
  status = RHC.snapshot_restore rhc_domain, namespace, app, app_uuid, opt['restore'], debug
  exit status if ! status
end

exit 0
